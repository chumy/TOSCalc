{"ast":null,"code":"import { Jugador } from \"../models/jugador\";\nimport { Alineacion } from \"../models/alineacion\";\nimport { Entrenador } from \"../models/entrenador\";\nimport { Empleado } from \"../models/empleado\";\nimport { Patrocinador } from \"../models/patrocinador\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./empleados.service\";\n//import { THIS_EXPR } from \"@angular/compiler/src/output/output_ast\";\nexport let AlineacionService = /*#__PURE__*/(() => {\n  class AlineacionService {\n    constructor(_empleadoService) {\n      this._empleadoService = _empleadoService;\n      this.posicionesAtaque = [\"DELANTERO_IZQUIERDO\", \"DELANTERO_DERECHO\", \"EXTREMO_DERECHO\", \"CENTRO_DERECHO\", \"CENTRO_IZQUIERDO\", \"EXTREMO_IZQUIERDO\"];\n      this.posicionesDefensa = [\"DEFENSA_DERECHO\", \"DEFENSA_IZQUIERDO\", \"LATERAL_DERECHO\", \"LATERAL_IZQUIERDO\", \"PORTERO\"];\n      this.posicionesAtaqueIniciales = [\"DELANTERO_IZQUIERDO\", \"DELANTERO_DERECHO\", \"EXTREMO_DERECHO\", \"CENTRO_DERECHO\", \"CENTRO_IZQUIERDO\", \"EXTREMO_IZQUIERDO\"];\n      this.posicionesDefensaIniciales = [\"DEFENSA_DERECHO\", \"DEFENSA_IZQUIERDO\", \"LATERAL_DERECHO\", \"LATERAL_IZQUIERDO\", \"PORTERO\"];\n      this.alineacion = new Alineacion();\n      let empleados = _empleadoService.empleados;\n      //this.cargarAlineacion();\n    }\n    cargarAlineacion() {\n      /*if (localStorage.getItem(\"alineacion\")) {\n        this.alineacion = JSON.parse(localStorage.getItem(\"alineacion\"));\n      } else {*/\n      this.alineacion = new Alineacion();\n      //\n    }\n    guardarAlineacion() {\n      this.actualizarValores();\n      //localStorage.setItem(\"alineacion\", JSON.stringify(this.alineacion));\n    }\n    guardarJugadorPosicion(jugador, posicion) {\n      //Chequear que no exista previamente\n      this.eliminarJugador(jugador);\n      this.alineacion[posicion] = jugador;\n      this.guardarAlineacion();\n    }\n    guardarEntrenadorPosicion(entrenador, posicion) {\n      //Chequear que no exista previamente\n      this.eliminarEntrenador(entrenador);\n      this.alineacion[posicion] = entrenador;\n      this.guardarAlineacion();\n    }\n    guardarEmpleadoPosicion(empleado, posicion) {\n      //Chequear que no exista previamente\n      this.alineacion[posicion] = empleado;\n      this.guardarAlineacion();\n    }\n    guardarPatrocinadorPosicion(patrocinador, posicion) {\n      //Chequear que no exista previamente\n      this.alineacion[posicion] = patrocinador;\n      this.guardarAlineacion();\n    }\n    actualizarValores() {\n      this.actualizarGanancias();\n      this.actualizarAtaque();\n      this.actualizarDefensa();\n    }\n    actualizarGanancias() {\n      this.alineacion.GANANCIAS = this.alineacion.AFICION;\n      Object.keys(this.alineacion).forEach(key => {\n        if (typeof this.alineacion[key] == \"object\") {\n          this.alineacion.GANANCIAS += parseInt(this.alineacion[key].sueldo);\n        }\n      });\n    }\n    actualizarDefensa() {\n      let defensa = 0;\n      let posiciones;\n      //Obtener posiciones de Ataque\n      posiciones = this.getPosicionesDefensa();\n      Object.keys(this.alineacion).forEach(key => {\n        if (typeof this.alineacion[key] == \"object\") {\n          //Si es Jugador\n          if (posiciones.includes(key)) {\n            //Si esta vacio\n            if (this.alineacion[key].id === null) {\n              defensa = defensa - 2;\n            } else {\n              defensa += this.calculoPosicion(key, this.alineacion[key], \"DEFENSA\");\n            }\n          }\n        }\n      });\n      this.alineacion.DEFENSA = defensa;\n    }\n    actualizarAtaque() {\n      let ataque = 0;\n      let posiciones;\n      Object.keys(this.alineacion).forEach(key => {\n        if (typeof this.alineacion[key] == \"object\") {\n          //Si es Jugador\n          //Obtener posiciones de Ataque\n          posiciones = this.getPosicionesAtaque();\n          if (posiciones.includes(key)) {\n            //Si esta vacio\n            if (this.alineacion[key].id === null) {\n              ataque = ataque - 2;\n            } else {\n              ataque += this.calculoPosicion(key, this.alineacion[key], \"ATAQUE\");\n            }\n          }\n        }\n      });\n      this.alineacion.ATAQUE = ataque;\n    }\n    eliminarJugador(jugador) {\n      Object.keys(this.alineacion).forEach(key => {\n        if (typeof this.alineacion[key] == \"object\" && this.alineacion[key].id === jugador.id) {\n          this.alineacion[key] = new Jugador();\n        }\n      });\n      this.actualizarValores();\n    }\n    eliminarEntrenador(entrenador) {\n      Object.keys(this.alineacion).forEach(key => {\n        if (typeof this.alineacion[key] == \"object\" && this.alineacion[key].id === entrenador.id) {\n          this.alineacion[key] = new Entrenador();\n          if (key === \"COACH1\") {\n            if (this.alineacion[\"COACH2\"].id != null) {\n              this.alineacion[key] = this.alineacion[\"COACH2\"];\n              this.alineacion[\"COACH2\"] = new Entrenador();\n            } else if (this.alineacion[\"COACH3\"].id != null) {\n              this.alineacion[key] = this.alineacion[\"COACH3\"];\n              this.alineacion[\"COACH3\"] = new Entrenador();\n            } else {\n              // Restore initial positions\n              this.posicionesAtaque = this.posicionesAtaqueIniciales;\n              this.posicionesDefensa = this.posicionesDefensaIniciales;\n            }\n          }\n        }\n      });\n      this.actualizarValores();\n    }\n    eliminarBanquillo(posicion) {\n      this.alineacion[posicion] = new Entrenador();\n      this.actualizarValores();\n    }\n    eliminarPatrocinador(posicion) {\n      this.alineacion[posicion] = new Patrocinador();\n      this.actualizarValores();\n    }\n    eliminarEmpleado(posicion) {\n      this.alineacion[posicion] = new Empleado();\n      this.actualizarValores();\n    }\n    calculoPosicion(posicion, jugador, tipo) {\n      let puntos = 0;\n      let aux;\n      switch (posicion) {\n        case \"DELANTERO_IZQUIERDO\":\n          aux = jugador.tiro;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (jugador.habArriba === \"TIRO\") puntos += 2;\n          if (this.alineacion[\"EXTREMO_IZQUIERDO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") {\n            puntos += jugador.habIzquierda === \"CENTRO\" ? 3 : 1;\n          }\n          if (this.alineacion[\"DELANTERO_DERECHO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"CENTRO_IZQUIERDO\"].habArriba === jugador.habAbajo && jugador.habAbajo !== \"NONE\") {\n            puntos += jugador.habAbajo === \"PASE\" ? 3 : 1;\n          }\n          break;\n        case \"DELANTERO_DERECHO\":\n          aux = jugador.tiro;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (jugador.habArriba === \"TIRO\") puntos += 2;\n          //Simbolos iguales +1\n          if (this.alineacion[\"DELANTERO_IZQUIERDO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") {\n            puntos += 1;\n          }\n          if (this.alineacion[\"EXTREMO_DERECHO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") {\n            puntos += jugador.habDerecha === \"CENTRO\" ? 3 : 1;\n          }\n          if (this.alineacion[\"CENTRO_DERECHO\"].habArriba === jugador.habAbajo && jugador.habAbajo !== \"NONE\") {\n            puntos += jugador.habAbajo === \"PASE\" ? 3 : 1;\n          }\n          break;\n        case \"EXTREMO_IZQUIERDO\":\n          aux = tipo === \"ATAQUE\" ? jugador.centrarIzq : jugador.defensaIzq;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (this.alineacion[\"LATERAL_IZQUIERDO\"].habArriba === jugador.habAbajo && jugador.habAbajo !== \"NONE\") {\n            puntos += jugador.habAbajo === \"PASE\" ? 3 : 1;\n          }\n          if (this.alineacion[\"CENTRO_IZQUIERDO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"DELANTERO_IZQUIERDO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") puntos += jugador.habDerecha === \"CENTRO\" ? 3 : 1;\n          break;\n        case \"CENTRO_IZQUIERDO\":\n          aux = tipo === \"ATAQUE\" ? jugador.pase : jugador.entradas;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (this.alineacion[\"DEFENSA_IZQUIERDO\"].habArriba === jugador.habAbajo && jugador.habAbajo !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"EXTREMO_IZQUIERDO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"CENTRO_DERECHO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"DELANTERO_IZQUIERDO\"].habAbajo === jugador.habArriba && jugador.habArriba !== \"NONE\") {\n            console.log(jugador);\n            puntos += jugador.habArriba === \"PASE\" ? 3 : 1;\n            console.log(puntos);\n          }\n          break;\n        case \"CENTRO_DERECHO\":\n          aux = tipo === \"ATAQUE\" ? jugador.pase : jugador.entradas;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (this.alineacion[\"DEFENSA_DERECHO\"].habArriba === jugador.habAbajo && jugador.habAbajo !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"EXTREMO_DERECHO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"CENTRO_IZQUIERDO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"DELANTERO_DERECHO\"].habAbajo === jugador.habArriba && jugador.habArriba !== \"NONE\") {\n            puntos += jugador.habArriba === \"PASE\" ? 3 : 1;\n          }\n          break;\n        case \"EXTREMO_DERECHO\":\n          aux = tipo === \"ATAQUE\" ? jugador.centrarDcha : jugador.defensaDcha;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (this.alineacion[\"LATERAL_DERECHO\"].habArriba === jugador.habAbajo && jugador.habAbajo !== \"NONE\") {\n            puntos += jugador.habAbajo === \"PASE\" ? 3 : 1;\n          }\n          if (this.alineacion[\"CENTRO_DERECHO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"DELANTERO_DERECHO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") puntos += jugador.habIzquierda === \"CENTRO\" ? 3 : 1;\n          break;\n        case \"LATERAL_IZQUIERDO\":\n          aux = tipo === \"ATAQUE\" ? jugador.centrarIzq : jugador.defensaIzq;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (jugador.habIzquierda === \"ENTRADAS\") puntos += 2;\n          if (this.alineacion[\"EXTREMO_IZQUIERDO\"].habAbajo === jugador.habArriba && jugador.habArriba !== \"NONE\") puntos += jugador.habArriba === \"PASE\" ? 3 : 1;\n          if (this.alineacion[\"DEFENSA_IZQUIERDO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") puntos += jugador.habIzquierda === \"ENTRADAS\" ? 3 : 1;\n          break;\n        case \"DEFENSA_IZQUIERDO\":\n          aux = tipo === \"ATAQUE\" ? jugador.pase : jugador.entradas;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (jugador.habAbajo === \"ENTRADAS\") puntos += 2;\n          if (this.alineacion[\"CENTRO_IZQUIERDO\"].habAbajo === jugador.habArriba && jugador.habArriba !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"DEFENSA_DERECHO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"LATERAL_IZQUIERDO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") puntos += 1;\n          break;\n        case \"DEFENSA_DERECHO\":\n          aux = tipo === \"ATAQUE\" ? jugador.pase : jugador.entradas;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (jugador.habAbajo === \"ENTRADAS\") puntos += 2;\n          if (this.alineacion[\"CENTRO_DERECHO\"].habAbajo === jugador.habArriba && jugador.habArriba !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"DEFENSA_IZQUIERDO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") puntos += 1;\n          if (this.alineacion[\"LATERAL_DERECHO\"].habIzquierda === jugador.habDerecha && jugador.habDerecha !== \"NONE\") puntos += 1;\n          break;\n        case \"LATERAL_DERECHO\":\n          aux = tipo === \"ATAQUE\" ? jugador.centrarDcha : jugador.defensaDcha;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          if (jugador.habDerecha === \"ENTRADAS\") puntos += 2;\n          if (this.alineacion[\"EXTREMO_DERECHO\"].habAbajo === jugador.habArriba && jugador.habArriba !== \"NONE\") puntos += jugador.habArriba === \"PASE\" ? 3 : 1;\n          if (this.alineacion[\"DEFENSA_DERECHO\"].habDerecha === jugador.habIzquierda && jugador.habIzquierda !== \"NONE\") puntos += 1;\n          break;\n        case \"PORTERO\":\n          //debugger;\n          aux = jugador.entradas;\n          if (parseInt(aux) > 0) puntos = parseInt(aux);\n          break;\n        default:\n          puntos = 0;\n      }\n      // Anadir puntos extra por entrenador\n      //console.log(jugador);\n      puntos += this.getPuntosHabilidad(jugador);\n      //console.log(posicion + \" : \" + puntos);\n      return puntos;\n    }\n    getPosicionesAtaque() {\n      let calculatedPositionsAtaque = [...this.posicionesAtaque];\n      if (this.alineacion[\"COACH1\"].posAtaque !== \"NONE\") calculatedPositionsAtaque.push(this.alineacion[\"COACH1\"].posAtaque);\n      if (this.alineacion[\"COACH1\"].posDefensa !== \"NONE\") calculatedPositionsAtaque = calculatedPositionsAtaque.map(data => {\n        if (data !== this.alineacion[\"COACH1\"].posDefensa) return data;\n      });\n      return calculatedPositionsAtaque;\n    }\n    getPosicionesDefensa() {\n      let calculatedPositionsDefensa = [...this.posicionesDefensa];\n      if (this.alineacion[\"COACH1\"].posDefensa !== \"NONE\") calculatedPositionsDefensa.push(this.alineacion[\"COACH1\"].posDefensa);\n      if (this.alineacion[\"COACH1\"].posAtaque !== \"NONE\") calculatedPositionsDefensa = calculatedPositionsDefensa.map(data => {\n        if (data !== this.alineacion[\"COACH1\"].posAtaque) return data;\n      });\n      return calculatedPositionsDefensa;\n    }\n    getPuntosHabilidad(jugador) {\n      let puntos = 0;\n      let listaEntrenadores = [\"COACH1\", \"COACH2\", \"COACH3\"];\n      listaEntrenadores.forEach(nombre => {\n        if (this.alineacion[nombre].id) {\n          let entrenador = this.alineacion.getEntrenador(nombre);\n          let habilidadesJugador = jugador.getHabilidades();\n          let matches = entrenador.getModificadoresHabilidad().filter(data => {\n            return habilidadesJugador.includes(data);\n          });\n          matches = habilidadesJugador.filter(el => entrenador.getModificadoresHabilidad().includes(el));\n          //console.log(entrenador.getModificadoresHabilidad());\n          //console.log(jugador.getHabilidades());\n          matches.forEach(element => {\n            if (parseInt(entrenador[element]) > 0) puntos += parseInt(entrenador[element]);\n          });\n        }\n      });\n      return puntos;\n    }\n    getFreeBench() {\n      let listaBanquillos = [\"BENCH1\", \"BENCH2\", \"BENCH3\", \"BENCH4\", \"BENCH5\"];\n      let freeBench = \"BENCH5\";\n      var keepGoing = true;\n      listaBanquillos.forEach(posicion => {\n        if (keepGoing) {\n          if (this.alineacion[posicion].id == null) {\n            freeBench = posicion;\n            keepGoing = false;\n          }\n        }\n      });\n      return freeBench;\n    }\n    enviarEntrenadorBanquillo(entrenador) {\n      let posicion = this.getFreeBench();\n      this.alineacion[posicion] = entrenador;\n      this.actualizarGanancias();\n    }\n    enviarJugadorBanquillo(jugador) {\n      let posicion = this.getFreeBench();\n      this.alineacion[posicion] = jugador;\n      this.actualizarGanancias();\n    }\n    setAficion(valor) {\n      this.alineacion['AFICION'] = valor;\n      this.actualizarGanancias();\n    }\n    setEmpleado(empleado, posicion) {\n      this.alineacion[posicion] = empleado;\n      this.actualizarGanancias();\n    }\n    emptyAlineacion() {\n      let listaBanquillos = [\"BENCH1\", \"BENCH2\", \"BENCH3\", \"BENCH4\", \"BENCH5\"];\n      listaBanquillos.forEach(posicion => {\n        this.alineacion[posicion] = new Jugador();\n      });\n      this.posicionesDefensaIniciales.forEach(posicion => {\n        this.alineacion[posicion] = new Jugador();\n      });\n      this.posicionesAtaqueIniciales.forEach(posicion => {\n        this.alineacion[posicion] = new Jugador();\n      });\n      this.actualizarValores();\n    }\n    setMod(fichero) {\n      this.alineacion.mod = fichero;\n    }\n    static #_ = this.ɵfac = function AlineacionService_Factory(t) {\n      return new (t || AlineacionService)(i0.ɵɵinject(i1.EmpleadosService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AlineacionService,\n      factory: AlineacionService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return AlineacionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}